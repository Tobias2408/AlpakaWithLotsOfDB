@page "/login"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage sessionStorage
@using System.Net.Http.Json
@using AlpakaFrontend2.EntityFrameworkModels
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.ComponentModel.DataAnnotations

<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
<div>
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />

        <div>
            <label for="username">Username</label>
            <input id="username" type="text" @bind="loginModel.Username" />
            <ValidationMessage For="@(() => loginModel.Username)" />
        </div>

        <div>
            <label for="password">Password</label>
            <input id="password" type="password" @bind="loginModel.Password" />
            <ValidationMessage For="@(() => loginModel.Password)" />
        </div>

        <button type="submit">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }
</div>
</body>
</html>

@code {
    private LoginModel loginModel = new LoginModel();
    private string message;

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7053/api/Authenticate/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var tokenResponse = await response.Content.ReadFromJsonAsync<TokenResponse>();
            await sessionStorage.SetAsync("authToken", tokenResponse.Token);
            NavigationManager.NavigateTo("/CreateAlpakaEvent", forceLoad: true);
        }
        else
        {
            message = "Login failed. Please try again.";
            Console.WriteLine("Login failed"); // For debugging
        }
    }

    private class TokenResponse
    {
        public string Token { get; set; }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "User Name is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}